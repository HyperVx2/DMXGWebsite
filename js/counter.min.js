/*
*  Copyright (C) 2018 chaz2601
*  https://www.mc-market.org/members/53739/
*/

! function() {
    "use strict";

    function e(e, t) {
        if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
    }
    var t = function() {
            function e(e, t) {
                for (var n = 0; n < t.length; n++) {
                    var r = t[n];
                    r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r)
                }
            }
            return function(t, n, r) {
                return n && e(t.prototype, n), r && e(t, r), t
            }
        }(),
        n = function() {
            function n(t) {
                var r = t.ip,
                    a = t.element,
                    i = t.format,
                    o = void 0 === i ? "{online}" : i,
                    u = t.refreshRate,
                    l = void 0 === u ? 60e3 : u;
                if (e(this, n), void 0 == r) throw TypeError("ip cannot be null or undefined");
                if (void 0 == a) throw TypeError("element cannot be null or undefiend");
                this.ip = r, this.format = o, this.element = "string" == typeof a ? document.querySelector(a) : a, this.runQuery(), this.timerId = setInterval(this.runQuery.bind(this), 60*1000)
            }
            var port = document.getElementById("counter").getAttribute("counter-port");
            var version_raw = document.getElementById("counter").getAttribute("counter-version");
            var version = version_raw.toUpperCase();
            if (version == "PC"){
              version = "status";
            }
            if (version == "MCPE"){
              version = "query";
            }
            return t(n, [{
                key: "runQuery",
                value: function() {
                    var e = this,
                        t = new XMLHttpRequest;
                    t.onreadystatechange = function() {
                        if (4 === t.readyState && 200 === t.status) {
                            var n = JSON.parse(t.responseText);
                            if (null !== e.element.getAttribute("counter-status")) return void(e.element.innerHTML = n.online ? '<span style="color:lightgreen;">online</span>' : '<span style="color:#ff5252;">offline</span>');
                            if (n.online) {
                                var r = e.format.replace(/{\b(online|max)\b}/gi, function(e, t) {
                                    return n.players.now
                                });
                                e.element.innerHTML = r
                            }
                        }
                    }, t.open("GET", "https://mcapi.us/server/" + version + "?ip=" + this.ip + "&port=" + port), t.send()
                }
            }]), n
        }(),
        r = function() {
            for (var e = document.querySelectorAll("[counter-ip]"), t = 0; t < e.length; t++) {
                var r = e[t];
                new n({
                    element: r,
                    ip: r.getAttribute("counter-ip") || void 0,
                    format: r.getAttribute("counter-format") || void 0,
                    refreshRate: r.getAttribute("counter-refreshRate") || void 60000
                })
            }
        };
    "complete" === document.readyState ? r() : window.onload = r, window.PlayerCounter = n
}();
